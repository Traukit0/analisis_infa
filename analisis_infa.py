# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AnalisisInfa
                                 A QGIS plugin
 Plugin para el análisis remoto de INFAs realizadas en terreno
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-11
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Manuel Eduardo Cano Nesbet
        email                : mcano@sernapesca.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .analisis_infa_dialog import AnalisisInfaDialog
import os.path
from . import (
    ccaa,
    utils,
    estaciones_mo,
    estaciones_ox,
    transectas,
    modulos,
    track_gpx,
    puntos_track_gpx,
    segmentos_track,
    wpt_gpx,
    batimetria,
    )

class AnalisisInfa:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AnalisisInfa_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Analisis INFA')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Variable para almacenar el valor del combobox
        self.utc_offset = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AnalisisInfa', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/analisis_infa/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Analisis remoto de INFAS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Analisis INFA'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = AnalisisInfaDialog()
            # Restringir selector de Batimetría a archivos .shp
            try:
                self.dlg.batiFileWidget.setFilter("Shapefile (*.shp)")
            except Exception:
                pass
            # Restringir selector de Excel a archivos .xlsx
            try:
                self.dlg.excelFileWidget.setFilter("Excel (*.xlsx)")
            except Exception:
                pass
            # Restringir selector de GPX a archivos .gpx
            try:
                self.dlg.gpxFileWidget.setFilter("GPX (*.gpx)")
            except Exception:
                pass
            # Conectar botón Resetear
            try:
                self.dlg.resetButton.clicked.connect(self.resetear_plugin)
            except Exception:
                pass
        # Conectar el combobox al método para capturar su valor
        self.dlg.utcComboBox.currentIndexChanged.connect(self.capturar_utc_offset)
        # Conectar el widget del boton al método correspondiente
        self.dlg.procesarButton.clicked.connect(self.procesar)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            print("Resultadode run(self) OK")
            pass
    
    def capturar_utc_offset(self):
        """Captura el valor del UTC desde el combobox"""
        texto = self.dlg.utcComboBox.currentText()
        if texto == "-3":
            self.utc_offset = 3
        elif texto == "-4":
            self.utc_offset = 4
        else:
            mensaje_sin_utc = "Error, No hay valor UTC seleccionado"
            self.mensajes_texto_plugin(mensaje_sin_utc)

    def mensajes_texto_plugin(self, mensaje):
        """
        Funcion necesaria para pasar los mensajes desde el código
        hacia el plugin, a fin de que puedan ser leídos por el usuario
        """
        self.dlg.textEdit.append(mensaje)
        
    def procesar(self):
        # Reiniciar la barra de progreso
        self.dlg.progressBar.setValue(0)

        excel_path = self.dlg.excelFileWidget.filePath()
        gpx_path = self.dlg.gpxFileWidget.filePath()
        directorio_salida_shp = self.dlg.dirsalidashpFileWidget.filePath()
        directorio_salida_kmz = self.dlg.dirsalidakmzFileWidget.filePath()
        capa_batimetria = self.dlg.batiFileWidget.filePath()
        valor_utc = self.utc_offset
        # # Imprimir valor UTC por mensaje para debugear:
        # mensaje_utc = f"El valor UTC seleccionado es: {valor_utc}"
        # self.mensajes_texto_plugin(mensaje_utc)
        
        # Validar los archivos ingresados
        if not excel_path.endswith('.xlsx'):
            self.mensajes_texto_plugin("Error: El archivo de Excel debe tener la extensión .xlsx")
            return
        if not gpx_path.endswith('.gpx'):
            self.mensajes_texto_plugin("Error: El archivo GPX debe tener la extensión .gpx")
            return
        if not capa_batimetria.endswith('.shp'):
            self.mensajes_texto_plugin("Error: El archivo de batimetría debe tener la extensión .shp")
            return

        # Llamar a las funciones
        self.mensajes_texto_plugin("Iniciando procesamiento de datos")
        self.dlg.progressBar.setValue(10)
        self.procesar_ccaa(excel_path, directorio_salida_shp, directorio_salida_kmz)
        self.dlg.progressBar.setValue(20)
        self.procesar_estaciones_mo(excel_path, directorio_salida_shp, directorio_salida_kmz)
        self.dlg.progressBar.setValue(30)
        self.procesar_estaciones_ox(excel_path, directorio_salida_shp, directorio_salida_kmz)
        self.dlg.progressBar.setValue(40)
        self.procesar_transectas(excel_path, directorio_salida_shp, directorio_salida_kmz)
        self.dlg.progressBar.setValue(50)
        self.procesar_modulos(excel_path, directorio_salida_shp, directorio_salida_kmz)
        self.dlg.progressBar.setValue(60)
        self.procesar_track_linea(gpx_path, excel_path, directorio_salida_shp)
        self.dlg.progressBar.setValue(70)
        self.procesar_puntos_track(gpx_path, excel_path, directorio_salida_shp, directorio_salida_kmz, valor_utc)
        self.dlg.progressBar.setValue(80)
        self.procesar_segmentos_track(excel_path, directorio_salida_shp, directorio_salida_kmz)
        self.dlg.progressBar.setValue(90)
        self.procesar_waypoints(gpx_path, excel_path, directorio_salida_shp, directorio_salida_kmz, valor_utc)
        self.dlg.progressBar.setValue(99)
        self.procesar_batimetria(capa_batimetria, directorio_salida_kmz)
        self.dlg.progressBar.setValue(100)
        self.mensajes_texto_plugin("\nTerminado el procesamiento de datos")

        # Resetear los campos de entrada
        self.resetear_campos()

    def resetear_plugin(self):
        """Limpia por completo la interfaz del plugin."""
        try:
            self.dlg.textEdit.clear()
        except Exception:
            pass
        try:
            self.dlg.progressBar.setValue(0)
        except Exception:
            pass
        try:
            # Restablecer selección de UTC
            self.dlg.utcComboBox.setCurrentIndex(0)
            self.utc_offset = None
        except Exception:
            pass
        # Limpiar widgets de archivo/directorio
        self.resetear_campos()
        # Cerrar y reabrir el diálogo para un reinicio visual completo
        try:
            self.dlg.close()
        except Exception:
            pass
        try:
            self.dlg = AnalisisInfaDialog()
            try:
                self.dlg.batiFileWidget.setFilter("Shapefile (*.shp)")
            except Exception:
                pass
            self.dlg.utcComboBox.currentIndexChanged.connect(self.capturar_utc_offset)
            self.dlg.procesarButton.clicked.connect(self.procesar)
            self.dlg.resetButton.clicked.connect(self.resetear_plugin)
            self.dlg.show()
            self.dlg.exec_()
        except Exception:
            pass

    def procesar_ccaa(self, excel_path, directorio_salida_shp, directorio_salida_kmz):
        ccaa.ccaa_a_kmz(excel_path, directorio_salida_shp, directorio_salida_kmz, self)

    def procesar_estaciones_mo(self, excel_path, directorio_salida_shp, directorio_salida_kmz):
        estaciones_mo.estaciones_mo(excel_path, directorio_salida_shp, directorio_salida_kmz, self)
    
    def procesar_estaciones_ox(self, excel_path, directorio_salida_shp, directorio_salida_kmz):
        estaciones_ox.estaciones_ox(excel_path, directorio_salida_shp, directorio_salida_kmz, self)
    
    def procesar_transectas(self, excel_path, directorio_salida_shp, directorio_salida_kmz):
        transectas.transectas(excel_path, directorio_salida_shp, directorio_salida_kmz, self)

    def procesar_modulos(self, excel_path, directorio_salida_shp, directorio_salida_kmz):
        modulos.modulos(excel_path, directorio_salida_shp, directorio_salida_kmz, self)

    def procesar_track_linea(self, gpx_path, excel_path, directorio_salida_shp):
        track_gpx.extraer_track(gpx_path, excel_path, directorio_salida_shp, self)

    def procesar_puntos_track(self, gpx_path, excel_path, directorio_salida_shp, directorio_salida_kmz, valor_utc):
        puntos_track_gpx.extraer_track_points(gpx_path, excel_path, directorio_salida_shp, directorio_salida_kmz, valor_utc, self)
    
    def procesar_segmentos_track(self, excel_path, directorio_salida_shp, directorio_salida_kmz):
        segmentos_track.crear_segmentos_track(excel_path, directorio_salida_shp, directorio_salida_kmz, self)

    def procesar_waypoints(self, gpx_path, archivo_excel, directorio_salida_shp, directorio_salida_kmz, valor_utc):
        wpt_gpx.extraer_waypoints(gpx_path, archivo_excel, directorio_salida_shp, directorio_salida_kmz, valor_utc, self)

    def procesar_batimetria(self, capa_batimetria, directorio_salida_kmz):
        batimetria.batimetria_kmz(capa_batimetria, directorio_salida_kmz, self)

    def resetear_campos(self):
        """Resetea todos los campos de entrada de datos en el diálogo."""
        self.dlg.excelFileWidget.setFilePath('')
        self.dlg.gpxFileWidget.setFilePath('')
        self.dlg.dirsalidashpFileWidget.setFilePath('')
        self.dlg.dirsalidakmzFileWidget.setFilePath('')
        self.dlg.batiFileWidget.setFilePath('')